# coding: utf-8
# frozen_string_literal: true

# クリーンしないといけないときは、クリーンする
# すべてをクリーンさせたい場合は、.full_clean_version の値を一つ上げる
FULL_CLEAN_VERSION = (begin
                        IO.read('.full_clean_version').to_i
                      rescue
                        0
                      end)
current_version = (begin
                     IO.read('.current_version').to_i
                   rescue
                     0
                   end)
if current_version < FULL_CLEAN_VERSION
  puts 'Info: データバージョンが上がったのですべてクリーンします'
  rm_rf ['Output', 'Temp', FileList['.*.bucket'], FileList['*.bucket']]
  IO.write('.current_version', FULL_CLEAN_VERSION)
end

#
# Rakefile
#
$LOAD_PATH << './Tools/RubyLib'
$LOAD_PATH << './Tools/Converter'

require 'path_detector'
require 'find'
require 'open-uri'
require 'open3'
require 'pp'
require 'logger'
require 'deploy_mate'
require 'pathname'

TAG_SERVER = 'http://133.242.235.150:7000'

if RUBY_PLATFORM =~ /darwin/
  ASTYLE = './Tools/Bin/AStyle'
  CFSCTL = './Tools/Bin/cfsctl'
  PROTOC = 'protoc'
else
  ASTYLE = './Tools/Bin/AStyle.exe'
  CFSCTL = './Tools/Bin/cfsctl.exe'.to_s
  PROTOC = './Tools/Bin/protoc.exe'.to_s
end

DEPLOY_MATE = DeployMate.new(TAG_SERVER, CFSCTL)
PROJECT_ROOT = Pathname.new('.')
DATA_DIR = Pathname.new('Data')
OUTPUT = 'Output'
TEMP = 'Temp'

load 'Tools/Rakefiles/build.rake'
load 'Tools/Rakefiles/doc.rake'
load 'Tools/Rakefiles/runner.rake'
load 'Tools/Rakefiles/githook.rake'
load 'Tools/Rakefiles/convert.rake'

# rubocop:disable Style/GlobalVars
def logger
  unless $_logger
    $_logger = Logger.new(STDOUT)
    $_logger.level = Logger::INFO
  end
  $_logger
end
# rubocop:enable Style/GlobalVars

desc 'プログラムに必要な変換を行う'
task :prebuild do
  chdir 'Data' do
    sh 'rake proto codegen'
  end
end

task format: %i[format_cs format_ruby]

def filter_own(filelist)
  filelist
    .reject { |f| f =~ %r{/Vendor/} }
    .reject { |f| f =~ %r{/AutoGenerated/} }
    .reject { |f| f =~ %r{/GooglePlayGames/} }
    .reject { |f| f =~ %r{/Plugins/} }
end

desc '*.csファイルを整形する'
task :format_cs do
  srcs = filter_own(FileList['TcgClient/Assets/**/*.cs'].to_a)
  srcs.each_slice(30) do |slice|
    sh ASTYLE, '-Q', '--options=.astyle', *slice, verbose: false
  end
end

desc '*.rbファイルを整形する'
task :format_ruby do
  sh 'rubocop', '-a', 'Tools', 'Rakefile', *FileList['Tools/Rakefiles/*.rake']
end

task lint: [:'lint:filename', :'lint:module', 'lint:mark']

namespace :lint do
  desc 'マークされた文字列を検出'
  task :mark do
    sh 'ruby', 'Tools/RubyLib/mark_detector.rb', 'Client/Assets'
  end

  desc 'ファイル名チェッカー'
  task :filename do
    sh 'ruby', 'Tools/Misc/filename_linter.rb'
  end

  desc '各モジュールの分離性をテスト'
  task :module do
    sh 'ruby', 'Tools/Misc/module_builder.rb'
  end
end

desc 'protoファイルからプロトコルを作成する'
task :proto do
  mkdir_p __dir__ + "/autogen"
  mkdir_p "#{PROJECT_ROOT}/Client/Assets/Scripts/Rogue/AutoGenerated"

  sh PROTOC,
     "--ruby_out=#{PROJECT_ROOT}/Tools/RubyLib/autogen",
     "--proto_path=#{PROTO_DIR}",
     *FileList[PROTO_DIR + '*.proto']

  sh PROTOC,
     "--plugin=#{PROJECT_ROOT}/Tools/Bin/protoc-gen-dfcsharp" + (RUBY_PLATFORM =~ /mingw/ ? ".exe" : ""),
     "--dfcsharp_out=#{PROJECT_ROOT}/Client/Assets/Scripts/Rogue/AutoGenerated/",
     "--proto_path=#{PROTO_DIR}",
     *FileList[PROTO_DIR + '*.proto']
  FileList["#{PROJECT_ROOT}/Tools/RubyLib/autogen/*.rb", "#{PROJECT_ROOT}/Client/Assets/Scripts/Rogue/AutoGenerated/*.cs"].each do |f|
    src = IO.binread(f)
    IO.write(f, src)
  end
end

desc 'protoファイルからドキュメントを作成する'
task :proto_doc do
  begin
    mkdir_p PROJECT_ROOT + 'Doc/_site/AutoGen/ProtocolBuffer'
    mkdir_p PROJECT_ROOT + 'Doc/AutoGen/ProtocolBuffer'
    chdir PROTO_DIR do
      sh 'protoc',
         "--plugin=../Bin/protoc-gen-doc",
         "--doc_out=html,Proto.html:../../Doc/_site/AutoGen/ProtocolBuffer",
         "--proto_path=.",
         'master.proto', 'game.proto', 'game_log.proto'
    end
    cp PROJECT_ROOT + 'Doc/_site/AutoGen/ProtocolBuffer/Proto.html', PROJECT_ROOT + 'Doc/AutoGen/ProtocolBuffer/Proto.html' # TODO: 一時的にコミットするファイルに含める、そのうち消すこと
  rescue
    puts "WARN: cannot find protoc and protoc-doc-gen, please install 'protoc', 'protoc-doc-gen'"
  end
end

task :codegen do
  sh "ruby #{PROJECT_ROOT}/Tools/CodeGen/codegen #{PROJECT_ROOT}/Tools/CodeGen/global_cabinet.rb >#{PROJECT_ROOT}/Client/Assets/Scripts/Rogue/AutoGenerated/Cabinet.cs"
  sh "ruby #{PROJECT_ROOT}/Tools/CodeGen/codegen #{PROJECT_ROOT}/Tools/CodeGen/game_cabinet.rb >#{PROJECT_ROOT}/Client/Assets/Scripts/Rogue/AutoGenerated/GameCabinet.cs"
end

desc 'ソースコードの行数を取得する'
task :src_lines do
  cs = FileList['Client/Assets/**/*.cs'].to_a
  cs = cs
       .reject { |f| f =~ %r{/AutoGenerated/} }
       .reject { |f| f =~ %r{/Vendor/} }
       .reject { |f| f =~ %r{/Utage/} }
       .reject { |f| f =~ %r{/JOKER/} }
       .reject { |f| f =~ %r{/Slua/} }
  cs = cs.map do |f|
    src = File.open(f, 'r:ASCII-8BIT', &:read)
    lines = src.split(/\n/).size
    [f, lines, src.size]
  end
  dirs = cs.group_by { |f| File.dirname(f[0]) }
  puts dirs.size
  puts cs.inject(0) { |m, f| m + f[1] }
  sorted = dirs.map do |k, g|
    [g.inject(0) { |m, f| m + f[1] }, g.size, k]
  end
  sorted = sorted.sort_by { |x| x[0] }
  puts(sorted.reverse.take(500).map { |k| k.join("\t") })
end

desc 'その他のファイルのコピー'
task :copy do
  logger.info 'バージョン情報の出力中'
  cp 'DataVersion.txt', OUTPUT
  commit = (`git rev-parse --verify HEAD` rescue '????????')
  IO.write OUTPUT + 'DataCommitId.txt', commit
end
