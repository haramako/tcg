// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
using pb = global::Google.ProtocolBuffers;
using scg = global::System.Collections.Generic;
namespace Master {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Master {

  }
  #region Enums
  public enum SettingType {
    Integer = 0,
    String = 1,
    Float = 2,
  }

  public enum PlatformType {
    Windows = 0,
    Switch = 1,
    Ps4 = 2,
    Wsa = 3,
    Steam = 4,
  }

  public enum CardLocation {
    NoneCardLocation = 0,
    Hand = 1,
    Stack = 2,
    Grave = 3,
  }

  public enum SpecialType {
    Attack = 0,
    Defense = 1,
    Draw = 2,
    AddStatus = 3,
    AddCard = 7,
    Discard = 8,
    CloneCard = 9,
    AddMana = 10,
    AddHp = 11,
    MoveCard = 12,
    IfCardAll = 100,
  }

  public enum CharacterStatus {
    NoneCharacterStatus = 0,
    Block = 1,
    AttackUp = 2,
    AttackDown = 3,
    DefenseUp = 4,
    DefenseDown = 5,
    Strength = 6,
    Agility = 7,
  }

  public enum StatusGroup {
    NoStatusGroup = 0,
    AllStatus = 1,
    GoodStatus = 2,
    BadStatus = 3,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PbxHeader : pb.Message {
    public PbxHeader() { }
    public static PbxHeader CreateInstance() { var obj = new PbxHeader(); obj.Finish(); return obj; }
    public static PbxHeader CreateEmpty() { return new PbxHeader(); }
    private static readonly PbxHeader defaultInstance = new PbxHeader();
    public static PbxHeader DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class IntIndexEntry : pb.Message {
        public IntIndexEntry() { }
        public static IntIndexEntry CreateInstance() { var obj = new IntIndexEntry(); obj.Finish(); return obj; }
        public static IntIndexEntry CreateEmpty() { return new IntIndexEntry(); }
        private static readonly IntIndexEntry defaultInstance = new IntIndexEntry();
        public static IntIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public int Key;

        public int Value;

        #region Lite runtime methods
        #endregion

        public override void WriteTo(pb::CodedOutputStream output) {
          CalcSerializedSize();
          if (Key != 0) {
            output.WriteInt32(1, Key);
          }
          if (Value != 0) {
            output.WriteInt32(2, Value);
          }
        }

        public override int SerializedSize {
          get {
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = 0;
          if (Key != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
          }
          if (Value != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
          }
          return size;
        }
        public static IntIndexEntry ParseFrom(byte[] data) {
          var mes = CreateInstance(); mes.MergeFrom(data); return mes;
        }
        public static IntIndexEntry ParseFrom(global::System.IO.Stream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public static IntIndexEntry ParseFrom(pb::CodedInputStream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public override void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadInt32(ref this.Key);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Value);
                break;
              }
            }
          }
        }

        public override void Init() {
        }
        public override void Finish() {
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StringIndexEntry : pb.Message {
        public StringIndexEntry() { }
        public static StringIndexEntry CreateInstance() { var obj = new StringIndexEntry(); obj.Finish(); return obj; }
        public static StringIndexEntry CreateEmpty() { return new StringIndexEntry(); }
        private static readonly StringIndexEntry defaultInstance = new StringIndexEntry();
        public static StringIndexEntry DefaultInstance {
          get { return defaultInstance; }
        }

        public string Key = "";

        public int Value;

        #region Lite runtime methods
        #endregion

        public override void WriteTo(pb::CodedOutputStream output) {
          CalcSerializedSize();
          if (Key != "") {
            output.WriteString(1, Key);
          }
          if (Value != 0) {
            output.WriteInt32(2, Value);
          }
        }

        public override int SerializedSize {
          get {
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = 0;
          if (Key != "") {
            size += pb::CodedOutputStream.ComputeStringSize(1, Key);
          }
          if (Value != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
          }
          return size;
        }
        public static StringIndexEntry ParseFrom(byte[] data) {
          var mes = CreateInstance(); mes.MergeFrom(data); return mes;
        }
        public static StringIndexEntry ParseFrom(global::System.IO.Stream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public static StringIndexEntry ParseFrom(pb::CodedInputStream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public override void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 10: {
                input.ReadString(ref this.Key);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Value);
                break;
              }
            }
          }
        }

        public override void Init() {
        }
        public override void Finish() {
        }
      }

    }
    #endregion

    public List<global::Master.PbxHeader.Types.IntIndexEntry> IntIndex = new List<global::Master.PbxHeader.Types.IntIndexEntry>();

    public List<global::Master.PbxHeader.Types.StringIndexEntry> StringIndex = new List<global::Master.PbxHeader.Types.StringIndexEntry>();

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (IntIndex != null && IntIndex.Count > 0) {
        output.WriteMessageArray(1, IntIndex);
      }
      if (StringIndex != null && StringIndex.Count > 0) {
        output.WriteMessageArray(2, StringIndex);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if( IntIndex != null ) {
        foreach (global::Master.PbxHeader.Types.IntIndexEntry element in IntIndex) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
      }
      if( StringIndex != null ) {
        foreach (global::Master.PbxHeader.Types.StringIndexEntry element in StringIndex) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
      }
      return size;
    }
    public static PbxHeader ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static PbxHeader ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static PbxHeader ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, this.IntIndex, global::Master.PbxHeader.Types.IntIndexEntry.CreateEmpty);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, this.StringIndex, global::Master.PbxHeader.Types.StringIndexEntry.CreateEmpty);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( IntIndex == null ){
      IntIndex = new List<global::Master.PbxHeader.Types.IntIndexEntry>();
    }
    if( StringIndex == null ){
      StringIndex = new List<global::Master.PbxHeader.Types.StringIndexEntry>();
    }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class I18nMessage : pb.Message {
    public I18nMessage() { }
    public static I18nMessage CreateInstance() { var obj = new I18nMessage(); obj.Finish(); return obj; }
    public static I18nMessage CreateEmpty() { return new I18nMessage(); }
    private static readonly I18nMessage defaultInstance = new I18nMessage();
    public static I18nMessage DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Text = "";

    public string Tag = "";

    public string Variant = "";

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id != "") {
        output.WriteString(1, Id);
      }
      if (Text != "") {
        output.WriteString(2, Text);
      }
      if (Tag != "") {
        output.WriteString(3, Tag);
      }
      if (Variant != "") {
        output.WriteString(4, Variant);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Text != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      if (Tag != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Tag);
      }
      if (Variant != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Variant);
      }
      return size;
    }
    public static I18nMessage ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static I18nMessage ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static I18nMessage ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Text);
            break;
          }
          case 26: {
            input.ReadString(ref this.Tag);
            break;
          }
          case 34: {
            input.ReadString(ref this.Variant);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MessageFusion : pb.Message {
    public MessageFusion() { }
    public static MessageFusion CreateInstance() { var obj = new MessageFusion(); obj.Finish(); return obj; }
    public static MessageFusion CreateEmpty() { return new MessageFusion(); }
    private static readonly MessageFusion defaultInstance = new MessageFusion();
    public static MessageFusion DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id1 = "";

    public string Id2 = "";

    public string Text = "";

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id1 != "") {
        output.WriteString(1, Id1);
      }
      if (Id2 != "") {
        output.WriteString(2, Id2);
      }
      if (Text != "") {
        output.WriteString(3, Text);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id1 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id1);
      }
      if (Id2 != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Id2);
      }
      if (Text != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Text);
      }
      return size;
    }
    public static MessageFusion ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static MessageFusion ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static MessageFusion ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id1);
            break;
          }
          case 18: {
            input.ReadString(ref this.Id2);
            break;
          }
          case 26: {
            input.ReadString(ref this.Text);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConfigInfo : pb.Message {
    public ConfigInfo() { }
    public static ConfigInfo CreateInstance() { var obj = new ConfigInfo(); obj.Finish(); return obj; }
    public static ConfigInfo CreateEmpty() { return new ConfigInfo(); }
    private static readonly ConfigInfo defaultInstance = new ConfigInfo();
    public static ConfigInfo DefaultInstance {
      get { return defaultInstance; }
    }

    public string Id = "";

    public string Value = "";

    public global::Master.SettingType Type = global::Master.SettingType.Integer;

    public string Spec = "";

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id != "") {
        output.WriteString(1, Id);
      }
      if (Value != "") {
        output.WriteString(2, Value);
      }
      if (Type != global::Master.SettingType.Integer) {
        output.WriteEnum(3, (int) Type, Type);
      }
      if (Spec != "") {
        output.WriteString(4, Spec);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (Value != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Value);
      }
      if (Type != global::Master.SettingType.Integer) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
      }
      if (Spec != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Spec);
      }
      return size;
    }
    public static ConfigInfo ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static ConfigInfo ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static ConfigInfo ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Value);
            break;
          }
          case 24: {
            input.ReadEnum(ref this.Type);
            break;
          }
          case 34: {
            input.ReadString(ref this.Spec);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CardTemplate : pb.Message {
    public CardTemplate() { }
    public static CardTemplate CreateInstance() { var obj = new CardTemplate(); obj.Finish(); return obj; }
    public static CardTemplate CreateEmpty() { return new CardTemplate(); }
    private static readonly CardTemplate defaultInstance = new CardTemplate();
    public static CardTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CardType {
        Attack = 0,
        Skill = 1,
      }

    }
    #endregion

    public int Id;

    public string Name = "";

    public string Desc = "";

    public int ImageId;

    public int Cost;

    public List<global::Master.SpecialTemplate> SpecialTemplate = new List<global::Master.SpecialTemplate>();

    public List<global::Master.CardTemplate.Types.CardType> Type = new List<global::Master.CardTemplate.Types.CardType>();

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id != 0) {
        output.WriteInt32(1, Id);
      }
      if (Name != "") {
        output.WriteString(2, Name);
      }
      if (Desc != "") {
        output.WriteString(3, Desc);
      }
      if (ImageId != 0) {
        output.WriteInt32(4, ImageId);
      }
      if (Cost != 0) {
        output.WriteInt32(5, Cost);
      }
      if (SpecialTemplate != null && SpecialTemplate.Count > 0) {
        output.WriteMessageArray(6, SpecialTemplate);
      }
      if (Type.Count > 0) {
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
      }
      if (ImageId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, ImageId);
      }
      if (Cost != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Cost);
      }
      if( SpecialTemplate != null ) {
        foreach (global::Master.SpecialTemplate element in SpecialTemplate) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
      }
      {
        int dataSize = 0;
        if (Type.Count > 0) {
          foreach (global::Master.CardTemplate.Types.CardType element in Type) {
            dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
          }
          size += dataSize;
          size += 1;
          size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
        }
      }
      return size;
    }
    public static CardTemplate ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static CardTemplate ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static CardTemplate ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Name);
            break;
          }
          case 26: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.ImageId);
            break;
          }
          case 40: {
            input.ReadInt32(ref this.Cost);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, this.SpecialTemplate, global::Master.SpecialTemplate.CreateEmpty);
            break;
          }
          case 58:
          case 56: {
            input.ReadEnumArray<global::Master.CardTemplate.Types.CardType>(tag, this.Type);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( SpecialTemplate == null ){
      SpecialTemplate = new List<global::Master.SpecialTemplate>();
    }
    if( Type == null ){
      Type = new List<global::Master.CardTemplate.Types.CardType>();
    }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SpecialTemplate : pb.Message {
    public SpecialTemplate() { }
    public static SpecialTemplate CreateInstance() { var obj = new SpecialTemplate(); obj.Finish(); return obj; }
    public static SpecialTemplate CreateEmpty() { return new SpecialTemplate(); }
    private static readonly SpecialTemplate defaultInstance = new SpecialTemplate();
    public static SpecialTemplate DefaultInstance {
      get { return defaultInstance; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Option {
        Random = 0,
      }

      public enum CounterType {
        UsedInTurn = 0,
        InHand = 1,
        Mana = 2,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Counter : pb.Message {
        public Counter() { }
        public static Counter CreateInstance() { var obj = new Counter(); obj.Finish(); return obj; }
        public static Counter CreateEmpty() { return new Counter(); }
        private static readonly Counter defaultInstance = new Counter();
        public static Counter DefaultInstance {
          get { return defaultInstance; }
        }

        public global::Master.SpecialTemplate.Types.CounterType Type = global::Master.SpecialTemplate.Types.CounterType.UsedInTurn;

        public int Multiply;

        public List<global::Master.CardTemplate.Types.CardType> CardType = new List<global::Master.CardTemplate.Types.CardType>();

        public int CardId;

        #region Lite runtime methods
        #endregion

        public override void WriteTo(pb::CodedOutputStream output) {
          CalcSerializedSize();
          if (Type != global::Master.SpecialTemplate.Types.CounterType.UsedInTurn) {
            output.WriteEnum(1, (int) Type, Type);
          }
          if (Multiply != 0) {
            output.WriteInt32(2, Multiply);
          }
          if (CardType.Count > 0) {
          }
          if (CardId != 0) {
            output.WriteInt32(4, CardId);
          }
        }

        public override int SerializedSize {
          get {
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = 0;
          if (Type != global::Master.SpecialTemplate.Types.CounterType.UsedInTurn) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
          }
          if (Multiply != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Multiply);
          }
          {
            int dataSize = 0;
            if (CardType.Count > 0) {
              foreach (global::Master.CardTemplate.Types.CardType element in CardType) {
                dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
              }
              size += dataSize;
              size += 1;
              size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
            }
          }
          if (CardId != 0) {
            size += pb::CodedOutputStream.ComputeInt32Size(4, CardId);
          }
          return size;
        }
        public static Counter ParseFrom(byte[] data) {
          var mes = CreateInstance(); mes.MergeFrom(data); return mes;
        }
        public static Counter ParseFrom(global::System.IO.Stream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public static Counter ParseFrom(pb::CodedInputStream input) {
          var mes = CreateInstance(); mes.MergeFrom(input); return mes;
        }
        public override void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              }
              case 8: {
                input.ReadEnum(ref this.Type);
                break;
              }
              case 16: {
                input.ReadInt32(ref this.Multiply);
                break;
              }
              case 26:
              case 24: {
                input.ReadEnumArray<global::Master.CardTemplate.Types.CardType>(tag, this.CardType);
                break;
              }
              case 32: {
                input.ReadInt32(ref this.CardId);
                break;
              }
            }
          }
        }

        public override void Init() {
        }
        public override void Finish() {
        if( CardType == null ){
          CardType = new List<global::Master.CardTemplate.Types.CardType>();
        }
        }
      }

    }
    #endregion

    public global::Master.SpecialType Type = global::Master.SpecialType.Attack;

    public int Amount;

    public List<global::Master.SpecialTemplate.Types.Option> Opt = new List<global::Master.SpecialTemplate.Types.Option>();

    public List<global::Master.CardTemplate.Types.CardType> CardType = new List<global::Master.CardTemplate.Types.CardType>();

    public int CardId;

    public global::Master.CardLocation Location = global::Master.CardLocation.NoneCardLocation;

    public global::Master.CardLocation LocationTo = global::Master.CardLocation.NoneCardLocation;

    public global::Master.SpecialTemplate.Types.Counter Counter;

    public List<global::Master.CharacterStatus> Status = new List<global::Master.CharacterStatus>();

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Type != global::Master.SpecialType.Attack) {
        output.WriteEnum(1, (int) Type, Type);
      }
      if (Amount != 0) {
        output.WriteInt32(2, Amount);
      }
      if (Opt.Count > 0) {
      }
      if (CardId != 0) {
        output.WriteInt32(4, CardId);
      }
      if (Location != global::Master.CardLocation.NoneCardLocation) {
        output.WriteEnum(5, (int) Location, Location);
      }
      if( Counter != null ){
        output.WriteMessage(6, Counter);
      }
      if (LocationTo != global::Master.CardLocation.NoneCardLocation) {
        output.WriteEnum(7, (int) LocationTo, LocationTo);
      }
      if (CardType.Count > 0) {
      }
      if (Status.Count > 0) {
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Type != global::Master.SpecialType.Attack) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (Amount != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Amount);
      }
      {
        int dataSize = 0;
        if (Opt.Count > 0) {
          foreach (global::Master.SpecialTemplate.Types.Option element in Opt) {
            dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
          }
          size += dataSize;
          size += 1;
          size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
        }
      }
      {
        int dataSize = 0;
        if (CardType.Count > 0) {
          foreach (global::Master.CardTemplate.Types.CardType element in CardType) {
            dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
          }
          size += dataSize;
          size += 1;
          size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
        }
      }
      if (CardId != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, CardId);
      }
      if (Location != global::Master.CardLocation.NoneCardLocation) {
        size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Location);
      }
      if (LocationTo != global::Master.CardLocation.NoneCardLocation) {
        size += pb::CodedOutputStream.ComputeEnumSize(7, (int) LocationTo);
      }
      if( Counter != null ){
        size += pb::CodedOutputStream.ComputeMessageSize(6, Counter);
      }
      {
        int dataSize = 0;
        if (Status.Count > 0) {
          foreach (global::Master.CharacterStatus element in Status) {
            dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
          }
          size += dataSize;
          size += 1;
          size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
        }
      }
      return size;
    }
    public static SpecialTemplate ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static SpecialTemplate ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static SpecialTemplate ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadEnum(ref this.Type);
            break;
          }
          case 16: {
            input.ReadInt32(ref this.Amount);
            break;
          }
          case 26:
          case 24: {
            input.ReadEnumArray<global::Master.SpecialTemplate.Types.Option>(tag, this.Opt);
            break;
          }
          case 32: {
            input.ReadInt32(ref this.CardId);
            break;
          }
          case 40: {
            input.ReadEnum(ref this.Location);
            break;
          }
          case 50: {
            global::Master.SpecialTemplate.Types.Counter builder = global::Master.SpecialTemplate.Types.Counter.CreateEmpty();
            input.ReadMessage(builder);
            Counter = builder;
            break;
          }
          case 56: {
            input.ReadEnum(ref this.LocationTo);
            break;
          }
          case 66:
          case 64: {
            input.ReadEnumArray<global::Master.CardTemplate.Types.CardType>(tag, this.CardType);
            break;
          }
          case 74:
          case 72: {
            input.ReadEnumArray<global::Master.CharacterStatus>(tag, this.Status);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Opt == null ){
      Opt = new List<global::Master.SpecialTemplate.Types.Option>();
    }
    if( CardType == null ){
      CardType = new List<global::Master.CardTemplate.Types.CardType>();
    }
    if( Counter == null ){
      Counter = global::Master.SpecialTemplate.Types.Counter.CreateInstance();
    }
    if( Status == null ){
      Status = new List<global::Master.CharacterStatus>();
    }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StatusInfo : pb.Message {
    public StatusInfo() { }
    public static StatusInfo CreateInstance() { var obj = new StatusInfo(); obj.Finish(); return obj; }
    public static StatusInfo CreateEmpty() { return new StatusInfo(); }
    private static readonly StatusInfo defaultInstance = new StatusInfo();
    public static StatusInfo DefaultInstance {
      get { return defaultInstance; }
    }

    public int Id;

    public string Symbol = "";

    public string Name = "";

    public List<global::Master.CharacterStatus> Overwrite = new List<global::Master.CharacterStatus>();

    public List<global::Master.CharacterStatus> Against = new List<global::Master.CharacterStatus>();

    public bool Decrement;

    public bool All;

    public bool Good;

    public bool Bad;

    public string Spec = "";

    public string Desc = "";

    public bool WithoutPlayer;

    public bool WithoutMonster;

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Id != 0) {
        output.WriteInt32(1, Id);
      }
      if (Symbol != "") {
        output.WriteString(2, Symbol);
      }
      if (Name != "") {
        output.WriteString(3, Name);
      }
      if (Overwrite.Count > 0) {
      }
      if (Against.Count > 0) {
      }
      if (Decrement != false) {
        output.WriteBool(6, Decrement);
      }
      if (Good != false) {
        output.WriteBool(7, Good);
      }
      if (Spec != "") {
        output.WriteString(11, Spec);
      }
      if (Bad != false) {
        output.WriteBool(12, Bad);
      }
      if (All != false) {
        output.WriteBool(13, All);
      }
      if (Desc != "") {
        output.WriteString(16, Desc);
      }
      if (WithoutPlayer != false) {
        output.WriteBool(18, WithoutPlayer);
      }
      if (WithoutMonster != false) {
        output.WriteBool(19, WithoutMonster);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Id != 0) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (Symbol != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Symbol);
      }
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      {
        int dataSize = 0;
        if (Overwrite.Count > 0) {
          foreach (global::Master.CharacterStatus element in Overwrite) {
            dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
          }
          size += dataSize;
          size += 1;
          size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
        }
      }
      {
        int dataSize = 0;
        if (Against.Count > 0) {
          foreach (global::Master.CharacterStatus element in Against) {
            dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
          }
          size += dataSize;
          size += 1;
          size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
        }
      }
      if (Decrement != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Decrement);
      }
      if (All != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(13, All);
      }
      if (Good != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, Good);
      }
      if (Bad != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, Bad);
      }
      if (Spec != "") {
        size += pb::CodedOutputStream.ComputeStringSize(11, Spec);
      }
      if (Desc != "") {
        size += pb::CodedOutputStream.ComputeStringSize(16, Desc);
      }
      if (WithoutPlayer != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, WithoutPlayer);
      }
      if (WithoutMonster != false) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, WithoutMonster);
      }
      return size;
    }
    public static StatusInfo ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static StatusInfo ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static StatusInfo ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 8: {
            input.ReadInt32(ref this.Id);
            break;
          }
          case 18: {
            input.ReadString(ref this.Symbol);
            break;
          }
          case 26: {
            input.ReadString(ref this.Name);
            break;
          }
          case 34:
          case 32: {
            input.ReadEnumArray<global::Master.CharacterStatus>(tag, this.Overwrite);
            break;
          }
          case 42:
          case 40: {
            input.ReadEnumArray<global::Master.CharacterStatus>(tag, this.Against);
            break;
          }
          case 48: {
            input.ReadBool(ref this.Decrement);
            break;
          }
          case 56: {
            input.ReadBool(ref this.Good);
            break;
          }
          case 90: {
            input.ReadString(ref this.Spec);
            break;
          }
          case 96: {
            input.ReadBool(ref this.Bad);
            break;
          }
          case 104: {
            input.ReadBool(ref this.All);
            break;
          }
          case 130: {
            input.ReadString(ref this.Desc);
            break;
          }
          case 144: {
            input.ReadBool(ref this.WithoutPlayer);
            break;
          }
          case 152: {
            input.ReadBool(ref this.WithoutMonster);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Overwrite == null ){
      Overwrite = new List<global::Master.CharacterStatus>();
    }
    if( Against == null ){
      Against = new List<global::Master.CharacterStatus>();
    }
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DebugMenuInfo : pb.Message {
    public DebugMenuInfo() { }
    public static DebugMenuInfo CreateInstance() { var obj = new DebugMenuInfo(); obj.Finish(); return obj; }
    public static DebugMenuInfo CreateEmpty() { return new DebugMenuInfo(); }
    private static readonly DebugMenuInfo defaultInstance = new DebugMenuInfo();
    public static DebugMenuInfo DefaultInstance {
      get { return defaultInstance; }
    }

    public string Name = "";

    public string Action = "";

    public string Shortcut = "";

    public List<global::Master.DebugMenuInfo> Children = new List<global::Master.DebugMenuInfo>();

    #region Lite runtime methods
    #endregion

    public override void WriteTo(pb::CodedOutputStream output) {
      CalcSerializedSize();
      if (Name != "") {
        output.WriteString(1, Name);
      }
      if (Action != "") {
        output.WriteString(2, Action);
      }
      if (Children != null && Children.Count > 0) {
        output.WriteMessageArray(3, Children);
      }
      if (Shortcut != "") {
        output.WriteString(4, Shortcut);
      }
    }

    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = 0;
      if (Name != "") {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (Action != "") {
        size += pb::CodedOutputStream.ComputeStringSize(2, Action);
      }
      if (Shortcut != "") {
        size += pb::CodedOutputStream.ComputeStringSize(4, Shortcut);
      }
      if( Children != null ) {
        foreach (global::Master.DebugMenuInfo element in Children) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
      }
      return size;
    }
    public static DebugMenuInfo ParseFrom(byte[] data) {
      var mes = CreateInstance(); mes.MergeFrom(data); return mes;
    }
    public static DebugMenuInfo ParseFrom(global::System.IO.Stream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public static DebugMenuInfo ParseFrom(pb::CodedInputStream input) {
      var mes = CreateInstance(); mes.MergeFrom(input); return mes;
    }
    public override void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          }
          case 10: {
            input.ReadString(ref this.Name);
            break;
          }
          case 18: {
            input.ReadString(ref this.Action);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, this.Children, global::Master.DebugMenuInfo.CreateEmpty);
            break;
          }
          case 34: {
            input.ReadString(ref this.Shortcut);
            break;
          }
        }
      }
    }

    public override void Init() {
    }
    public override void Finish() {
    if( Children == null ){
      Children = new List<global::Master.DebugMenuInfo>();
    }
    }
  }

  #endregion

}

#endregion Designer generated code
