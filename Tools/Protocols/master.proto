/**
 * マスターデータ定義
 *
 * このファイルは、Tools/Protocols/master.proto で定義されている。
 *
 * ドキュメントを補足したい場合は、このファイルを編集すること
 *
 *
 *
 * ここで定義されたデータは、マスターデータに入る、もしくは、他のプロトコルから参照されるものである。
 */
syntax = "proto3";

package Master;

message PbxHeader {
	map<int32,int32> int_index = 1;
	map<string,int32> string_index = 2;
}

/**
 * 変換メッセージ
 */
message I18nMessage {
	string id = 1;
	string text = 2;
	string tag = 3;
	string variant = 4;
}

/**
 * メッセージの合成するための情報
 *
 * id1 のメッセージと id2 のメッセージが連続できた場合に、text のメッセージに合成する
 */
message MessageFusion {
	string id1 = 1; /// 合成する前段のメッセージ
	string id2 = 2; /// 合成する後段のメッセージ
	string text = 3; /// 合成後のメッセージ
}

enum SettingType {
	Integer = 0;
	String = 1;
	Float = 2;
}

message ConfigInfo {
	string id = 1; /// ID
	string value = 2; /// 値
	SettingType type = 3; /// 型(int,string)
	string spec = 4; /// 仕様書用説明
}

enum PlatformType {
	Windows = 0;
	Switch = 1;
	Ps4 = 2;
	Wsa = 3;
	Steam = 4;
}

//===========================================
// カード
//===========================================

/**
 * カードの情報
 */
message CardTemplate {
	/**
	* カード種別
	*/
	enum CardType 
	{
		Attack = 0;
		Skill = 1;
	}
 
	int32 id = 1;
	string name = 2;
	string desc = 3;
	int32 image_id = 4;
	int32 cost = 5; /// コスト
	repeated SpecialTemplate special_template = 6; // 効果
	repeated CardType type = 7;
}

/**
 * カードの場所
 */
enum CardLocation
{
	NoneCardLocation = 0; /// 未指定
	Hand = 1; /// 手札
	Stack = 2; /// 山札
	Grave = 3; /// 捨て札
}
 
/**
 *　能力の種類
 */
enum SpecialType {
	/**
	 * 攻撃を行う
	 *
	 * attack(10) => ダメージ(10)
	 */
	Attack = 0;

	/**
	 * ブロックを加算する
	 *
	 * defense(10) => ブロック(10)
	 */
	Defense = 1;

	/**
	 * カードを引く
	 * draw(2) => 2枚カードを引く
	 */
	Draw = 2;

	/**
	 * 弱体を付与する
	 *
	 * weak(3)
	 */
	Weak = 3;

	/**
	 * 筋力を上げる
	 */
	PowerUp = 5;

	/**
	 * 筋力を下げる
	 */
	PowerDown = 6;

	/**
	 * 任意のカードを{手札|すて札|山札}に追加
	 * 
	 * add_card(card_id: 101, location: stack)
	 */
	AddCard = 7;

	/**
	 * 廃棄
	 *
	 * discard()
	 */
	Discard = 8;

	/**
	 * カードのコピーを特定の場所に追加
	 * 
	 * clone_card(location:stack) => カードを山札に追加
	 * clone_card(amount:2, location:grave) => カードを捨て札に2枚追加
	 */
	CloneCard = 9;

	/**
	 * マナを得る
	 * 
	 * add_mana(2) => マナを２追加
	 */
	AddMana = 10;

	/**
	 * HPを得る
	 * 
	 * add_hp(2) => HPを２得る
	 * add_hp(-4) => HPを４失う
	 */
	AddHp = 11;

	/**
	 * 任意のカードを特定の場所に置く
	 *
	 * optにrandomを指定すると、任意ではなく、ランダムのカードが対象となる
	 *
	 * move_card(location: hand, location_to: stack) => 手札から捨て札に移動
	 * move_card(2, random, location: discard, location_to: hand) => 捨て札から手札にランダムで2枚移動
	 */
	MoveCard = 12;

	/**
	 *
	 */

	/**
	 * 手札がすべて~の場合に使用可
	 *
	 * if_card_all(card_type:offence)
	 */
	IfCardAll = 100;

	/*
	{*}の場合
	戦闘でHPを失うたび、●消費が-1
	{カード種類}以外の手札を廃棄する
	カードを任意で捨てる

	このターンにカードを捨てていれば、▲▲を得る
	毒
	このターンに使用した{カード種類}xNのダメージを与える
	山札にカードがない時だけ使用可能
	次のターン、引くカードが2枚増える。
	
	*/
}

/**
 *
 */
message SpecialTemplate {
	enum Option {
		Random = 0; /// 特定のカードではなく、ランダムに選択する
	}
	/**
	 * カウンターの種類
	 */
	enum CounterType {
		UsedInTurn = 0; /// このターンに使ったカード
		InHand = 1; /// 手札の中のカードの枚数
		Mana = 2; /// 残りのマナすべて
	}
	/**
	 * なにかの数を数えるカウンター
	 *
	 * used_in_turn(card_type: attack) => このターンに使ったアタックカードの数
	 * in_hand(2, card_id: 999) => 手札の中の999のカード x 2
	 * mana(5) => 残りのマナすべてx5
	 */
	message Counter {
		CounterType type = 1;
		int32 multiply = 2;
		repeated CardTemplate.CardType card_type = 3;
		int32 card_id = 4;
	}

	SpecialType type = 1;
	int32 amount = 2;
	repeated Option opt = 3;
	repeated CardTemplate.CardType card_type = 8;
	int32 card_id = 4;
	CardLocation location = 5;
	CardLocation location_to = 7;
	Counter counter = 6; /// ***の枚数xNのようなものを表すもの

}

//===========================================
// キャラクタ
//===========================================

/**
 * 状態変化.
 */
enum CharacterStatus {
	NoneCharacterStatus = 0; /// なし
	Block = 1; /// ブロック
}

/**
 * 複数のステータス
 */
enum StatusGroup {
	NoStatusGroup = 0; /// なにもない
	AllStatus = 1; /// すべてのステータス
	GoodStatus = 2; /// よいステータス
	BadStatus = 3; /// 悪いステータス
}

/**
 * 状態変化の情報
 */
message StatusInfo {
	int32 id = 1;
	string symbol = 2;
	string name = 3;
	repeated CharacterStatus overwrite = 4; /// 上書きする状態異常
	repeated CharacterStatus against = 5; /// 相殺する状態異常	
	bool decrement = 6; /// 自動減算
	bool all = 13; /// clear_statusのALLできえる状態異常か（一部の状態異常は、ここにはいれない）
	bool good = 7; /// 良い状態異常か
	bool bad = 12; /// 悪い状態異常か
	string spec = 11; /// 仕様書の説明文
	string desc = 16; /// 説明文
	bool without_player = 18; /// プレイヤーには無効
	bool without_monster = 19; /// モンスターには無効
}

//===========================================
// デバッグメニュー
//===========================================

message DebugMenuInfo {
	string name = 1;
	string action = 2;
	string shortcut = 4;
	repeated DebugMenuInfo children = 3;
}

//===========================================
// テストデータ
//===========================================
